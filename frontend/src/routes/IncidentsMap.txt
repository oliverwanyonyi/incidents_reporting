import { useEffect, useRef, useState } from "react";
import { axiosInstance } from "../axios/axios";
import { MapContainer, TileLayer, Marker, Popup } from "react-leaflet";
// import {MarkerClusterGroup} from  'react-leaflet-cluster'
import 'leaflet/dist/leaflet.css'
const IncidentMap = () => {
  const [incidents, setIncidents] = useState([]);
  const [userLocation, setUserLocation] = useState({ lat: '', lon: '' });
  const mapRef = useRef();

  async function retrieveIncidents() {
    const { data } = await axiosInstance.get("/incidents/all");
    setIncidents(data);
  }

  useEffect(() => {
    retrieveIncidents();
  }, []);

  useEffect(() => {
    const initializeMap = async () => {
      try {
        const userLocation = await getUserLocation();
        setUserLocation(userLocation);

        if (mapRef.current) {
          mapRef.current.setView([userLocation.lat, userLocation.lon], 10);
        }
      } catch (error) {
        console.error("Error getting user location:", error.message);
      }
    };

    initializeMap();
  }, [mapRef.current]);

  function getUserLocation() {
    return new Promise((resolve, reject) => {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          const userLocation = { lat: latitude, lon: longitude };
          resolve(userLocation);
          
        },
        (error) => {
          console.error("Error getting user location:", error.message);
          reject(error);
        }
      );
    });
  }

  return (
    <div className="main-content-area map" style={{ position: "relative", height: "100vh" }}>
      <MapContainer
        ref={mapRef}
        center={[userLocation.lat, userLocation.lon]}
        // zoom={1}
        style={{ height: "100%",background:"black"  }}
        scrollWheelZoom={false}
      >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
{/* <MarkerClusterGroup chunkedLoading> */}
        {incidents.map((incident) => (
          <Marker key={incident.id} position={[incident.lat, incident.lon]}>
            <Popup>{incident.description}</Popup>
          </Marker>
        ))}
        {/* </MarkerClusterGroup> */}
      </MapContainer>
    </div>
  );
};

export default IncidentMap;
